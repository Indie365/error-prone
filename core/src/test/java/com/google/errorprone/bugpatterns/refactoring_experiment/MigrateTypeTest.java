package com.google.errorprone.bugpatterns.refactoring_experiment;

import static com.google.errorprone.BugCheckerRefactoringTestHelper.TestMode.TEXT_MATCH;

import com.google.errorprone.BugCheckerRefactoringTestHelper;
import com.google.errorprone.bugpatterns.CanonicalDuration;
import com.google.errorprone.bugpatterns.refactoringexperiment.refactor.MigrateType;

/**
 * Created by ameya on 3/14/18.
 */
//@RunWith(JUnit4.class)
public class MigrateTypeTest {

    public void testFuncIntInt_IntUnary_positive() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines(
                        "TestGoal1.java",
                        "import java.util.function.Function;",
                        "class TestGoal1 {",
                        "public int test(Function<Integer,Integer> f){",
                        "return f.apply(5);",
                        "}",
                        "public int boo5(){",
                        "return test(x->x + 5);",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}")
                .addOutputLines(
                        "TestGoal1.java",
                        "import java.util.function.Function;",
                        "import java.util.function.IntUnaryOperator;",
                        "class TestGoal1 {",
                        "public int test(IntUnaryOperator f){",
                        "return f.applyAsInt(5);",
                        "}",
                        "public int boo5(){",
                        "return test(x->x + 5);",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}")
                .doTest(TEXT_MATCH);
    }

    public void testFuncBooleanInt_ToInt_positive() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines(
                        "TestGoal1.java",
                        "import java.util.function.Function;",
                        "class TestGoal1 {",
                        "public int test(Function<Boolean,Integer> f){",
                        "return f.apply(false);",
                        "}",
                        "public int boo5(){",
                        "return test(x->1);",
                        "}",
                        "public int boo6(){",
                        "return test(x->2);",
                        "}",
                        "}")
                .addOutputLines(
                        "TestGoal1.java",
                        "import java.util.function.Function;",
                        "import java.util.function.ToIntFunction;",
                        "class TestGoal1 {",
                        "public int test(ToIntFunction<Boolean> f){",
                        "return f.applyAsInt(false);",
                        "}",
                        "public int boo5(){",
                        "return test(x->1);",
                        "}",
                        "public int boo6(){",
                        "return test(x->2);",
                        "}",
                        "}")
                .doTest(TEXT_MATCH);
    }

    public void testFuncIntString_IntFunc_positive() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines(
                        "TestGoal1.java",
                        "import java.util.function.Function;",
                        "class TestGoal1 {",
                        "public String test(Function<Integer,String> f){",
                        "return f.apply(5);",
                        "}",
                        "public int boo5(){",
                        "return test(x->\"foo\");",
                        "}",
                        "public int boo6(){",
                        "return test(x->\"boo\");",
                        "}",
                        "}")
                .addOutputLines(
                        "TestGoal1.java",
                        "import java.util.function.Function;",
                        "import java.util.function.IntFunction;",
                        "class TestGoal1 {",
                        "public int test(IntFunction<String> f){",
                        "return f.apply(5);",
                        "}",
                        "public int boo5(){",
                        "return test(x->\"foo\");",
                        "}",
                        "public int boo6(){",
                        "return test(x->\"boo\");",
                        "}",
                        "}")
                .doTest(TEXT_MATCH);
    }

    public void testFuncIntInt_IntUnary_negative() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new CanonicalDuration(), getClass())
                .addInputLines(
                        "TestGoal1.java",
                        "import java.util.function.Function;",
                        "class TestGoal1 {",
                        "Function<Integer,Integer> f;",
                        "public int test(Function<Integer,Integer> f){",
                        "this.f = f;",
                        "return f.apply(5);",
                        "}",
                        "public int boo5(){",
                        "return test(x->x + 5);",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}")
                .addOutputLines(
                        "TestGoal1.java",
                        "import java.util.function.Function;",
                        "class TestGoal1 {",
                        "Function<Integer,Integer> f;",
                        "public int test(Function<Integer,Integer> f){",
                        "this.f = f;",
                        "return f.apply(5);",
                        "}",
                        "public int boo5(){",
                        "return test(x->x + 5);",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}")
                .doTest(TEXT_MATCH);
    }

    public void testFuncIntInt_IntUnary_Hierarchy_positive() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines(
                        "TestInterface.java",
                        "import java.util.function.Function;",
                        "interface TestGoal1 {",
                        "public int test(Function<Integer,Integer> f);",
                        "}",
                        "TestGoal1.java",
                        "import java.util.function.Function;",
                        "class TestGoal1 implements {",
                        "@Override",
                        "public int test(Function<Integer,Integer> f){",
                        "return f.apply(5);",
                        "}",
                        "public int boo5(){",
                        "return test(x->x + 5);",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}")
                .addOutputLines(
                        "TestInterface.java",
                        "import java.util.function.Function;",
                        "import java.util.function.IntUnaryOperator;",
                        "interface TestGoal1 {",
                        "public int test(IntUnaryOperator f);",
                        "}",
                        "TestGoal1.java",
                        "import java.util.function.Function;",
                        "import java.util.function.IntUnaryOperator;",
                        "class TestGoal1 implements {",
                        "@Override",
                        "public int test(IntUnaryOperator f){",
                        "return f.applyAsInt(5);",
                        "}",
                        "public int boo5(){",
                        "return test(x->x + 5);",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}")
                .doTest(TEXT_MATCH);
    }

    public void testFuncIntInt_IntUnary_Hierarchy_negative() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines(
                        "TestInterface.java",
                        "import java.util.function.Function;",
                        "interface TestGoal1 {",
                        "public int test(Function<T,U> f);",
                        "}",
                        "TestGoal1.java",
                        "import java.util.function.Function;",
                        "class TestGoal1 implements {",
                        "@Override",
                        "public int test(Function<Integer,Integer> f){",
                        "return f.apply(5);",
                        "}",
                        "public int boo5(){",
                        "return test(x->x + 5);",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}")
                .addOutputLines(
                        "TestInterface.java",
                        "import java.util.function.Function;",
                        "interface TestGoal1 {",
                        "public int test(Function<T,U> f);",
                        "}",
                        "TestGoal1.java",
                        "import java.util.function.Function;",
                        "class TestGoal1 implements {",
                        "@Override",
                        "public int test(Function<Integer,Integer> f){",
                        "return f.apply(5);",
                        "}",
                        "public int boo5(){",
                        "return test(x->x + 5);",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}")
                .doTest(TEXT_MATCH);
    }

    public void testFuncIntInt_passed_to_generic_negative() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines(
                        "TestExternal.java",
                        "import java.util.function.Function;",
                        "import java.util.Arrays;",
                        "import java.util.List;",
                        "public class TestExternal {",
                        "public int test(Function<Integer,Integer> ext){",
                        "identity(ext);",
                        "return ext.apply(5);",
                        "}",
                        "public int test1(){",
                        "return test(x->x);",
                        "}",
                        "public <T> T identity(T t){",
                        "return  t;",
                        "}",
                        "}")
                .addOutputLines(
                        "TestExternal.java",
                        "import java.util.function.Function;",
                        "import java.util.Arrays;",
                        "import java.util.List;",
                        "public class TestExternal {",
                        "public int test(Function<Integer,Integer> ext){",
                        "identity(ext);",
                        "return ext.apply(5);",
                        "}",
                        "public int test1(){",
                        "return test(x->x);",
                        "}",
                        "public <T> T identity(T t){",
                        "return  t;",
                        "}",
                        "}")
                .doTest(TEXT_MATCH);
    }

    public void psitive_Test_passed_to_nonGeneric() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestGoal1_passedToNonGeneric.java",
                        "import java.util.function.Function;",
                        "public class TestGoal1_passedToNonGeneric {",
                        "public int test(Function<Integer,Integer> f){",
                        "return helper(f);",
                        "}",
                        "public int helper(Function<Integer,Integer> f){",
                        "return f.apply(5);",
                        "}",
                        "public void boo5(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}"
                ).addOutputLines("TestGoal1_passedToNonGeneric.java",
                "import java.util.function.IntUnaryOperator;",
                "public class TestGoal1_passedToNonGeneric {",
                "public int test(IntUnaryOperator f){",
                "return helper(f);",
                "}",
                "public int helper(IntUnaryOperator f){",
                "return f.applyAsInt(5);",
                "}",
                "public void boo5(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}");
    }

    public void psitive_Test_SubType() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("MyFunction.java",
                        "import java.util.function.Function;",
                        "public interface MyFunction extends Function<Integer,Integer> {}",
                        "UseMyFunction.java",
                        "public class UseMyFunction {",
                        "public int test(MyFunction f){",
                        "return f.apply(4);",
                        "}",
                        "public void boo5(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}",
                        "UseMyFunctionAgain.java",
                        "public class UseMyFunctionAgain {",
                        "public int test(MyFunction f){",
                        "return f.apply(4);",
                        "}",
                        "public void boo5(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}",
                        "UseUseMyFunctionAgain.java",
                        "public class UseUseMyFunctionAgain extends  UseMyFunctionAgain {",
                        "@Override",
                        "public int test (MyFunction f){",
                        "return f.apply(4);",
                        "}",
                        "public void boo51(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo61(){",
                        "return test(x->x + 6);",
                        "}",
                        "}"
                ).addOutputLines("MyFunction.java",
                "import java.util.function.IntUnaryOperator;",
                "public interface MyFunction extends IntUnaryOperator {}",
                "UseMyFunction.java",
                "public class UseMyFunction {",
                "public int test(MyFunction f){",
                "return f.applyAsInt(4);",
                "}",
                "public void boo5(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}",
                "UseMyFunctionAgain.java",
                "public class UseMyFunctionAgain {",
                "public int test(MyFunction f){",
                "return f.applyAsInt(4);",
                "}",
                "public void boo5(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}",
                "UseUseMyFunctionAgain.java",
                "public class UseUseMyFunctionAgain extends  UseMyFunctionAgain {",
                "@Override",
                "public int test (MyFunction f){",
                "return f.applyAsInt(4);",
                "}",
                "public void boo51(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo61(){",
                "return test(x->x + 6);",
                "}",
                "}");
    }

    public void psitive_Test_passed_to_subType() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("MyFunction.java",
                        "import java.util.function.Function;",
                        "public interface MyFunction extends Function<Integer,Integer> {}",
                        "public class TestGoal1_passedToNonGenericSubType {",
                        "public int test(MyFunction f){",
                        "return helper(f);",
                        "}",
                        "public int helper(MyFunction f){",
                        "return f.apply(5);",
                        "}",
                        "",
                        "public void boo5(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}").addOutputLines("MyFunction.java",
                "import java.util.function.IntUnaryOperator;",
                "public interface MyFunction extends IntUnaryOperator {}",
                "public class TestGoal1_passedToNonGenericSubType {",
                "public int test(MyFunction f){",
                "return helper(f);",
                "}",
                "public int helper(MyFunction f){",
                "return f.applyAsInt(5);",
                "}",
                "",
                "public void boo5(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}");
    }

    public void psitive_Test_for_hierarchy() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestInterface.java",
                        "import java.util.function.Function;",
                        "public interface TestInterface {",
                        "int test(Function<Integer,Integer> f);",
                        "}",
                        "InheritsTestInterface2.java",
                        "import java.util.function.Function;",
                        "public class InheritsTestInterface2 implements TestInterface {",
                        "@Override",
                        "public int test(Function<Integer,Integer> f) {",
                        "return f.apply(6);",
                        "}",
                        "public void boo5(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}",
                        "InheritsTestInterface1.java",
                        "import java.util.function.Function;",
                        "public class InheritsTestInterface1 implements TestInterface {",
                        "@Override",
                        "public int test(Function<Integer,Integer> f) {",
                        "return f.apply(6);",
                        "}",
                        "public void boo5(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}",
                        "Inherits_InheritsTestInterface2.java",
                        "import java.util.function.Function;",
                        "public class Inherits_InheritsTestInterface2 extends InheritsTestInterface2 {",
                        "@Override",
                        "public int test(Function<Integer,Integer> f) {",
                        "return f.apply(6);",
                        "}",
                        "public void boo51(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo61 () {",
                        "return test(x -> x + 6);",
                        "}",
                        "}").addOutputLines("TestInterface.java",
                "import java.util.function.IntUnaryOperator;",
                "public interface TestInterface {",
                "int test(IntUnaryOperator f);",
                "}",
                "InheritsTestInterface2.java",
                "import java.util.function.IntUnaryOperator;",
                "public class InheritsTestInterface2 implements TestInterface {",
                "@Override",
                "public int test(IntUnaryOperator f) {",
                "return f.applyAsInt(6);",
                "}",
                "public void boo5(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}",
                "InheritsTestInterface1.java",
                "import java.util.function.IntUnaryOperator;",
                "public class InheritsTestInterface1 implements TestInterface {",
                "@Override",
                "public int test(IntUnaryOperator f) {",
                "return f.applyAsInt(6);",
                "}",
                "public void boo5(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}",
                "Inherits_InheritsTestInterface2.java",
                "import java.util.function.IntUnaryOperator;",
                "public class Inherits_InheritsTestInterface2 extends InheritsTestInterface2 {",
                "@Override",
                "public int test(IntUnaryOperator f) {",
                "return f.applyAsInt(6);",
                "}",
                "public void boo51(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo61 () {",
                "return test(x -> x + 6);",
                "}",
                "}");
    }

    public void psitive_Test_for_MthdRef() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestGoal1.java",
                        "import java.util.function.Function;",
                        "import java.util.stream.Stream;",
                        "public class TestGoal1 {",
                        "public int test(Function<Integer,Integer> f, Function<Integer,Boolean> pred){",
                        "Stream<Integer> integerStream = Stream.of(5, 4, 7, 8, 9, 6, 3, 2, 4, 5);",
                        "return integerStream.map(f::apply).filter(pred::apply).reduce(0, (x,y)->x + y);",
                        "}",
                        "public void boo5(){",
                        "test(x-> x + 5 ,x -> x%2 == 0);",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6,x -> x%2 != 0);",
                        "}",
                        "}").addOutputLines("TestGoal1.java",
                "import java.util.function.IntUnaryOperator;",
                "import java.util.function.IntPredicate;",
                "import java.util.stream.Stream;",
                "public class TestGoal1 {",
                "public int test(IntUnaryOperator f, IntPredicate pred){",
                "Stream<Integer> integerStream = Stream.of(5, 4, 7, 8, 9, 6, 3, 2, 4, 5);",
                "return integerStream.map(f::applyAsInt).filter(pred::test).reduce(0, (x,y)->x + y);",
                "}",
                "public void boo5(){",
                "test(x-> x + 5 ,x -> x%2 == 0);",
                "}",
                "public int boo6(){",
                "return test(x->x + 6,x -> x%2 != 0);",
                "}",
                "}");
    }

    public void psitive_Test_for_MthdRef_subtype() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("MyFunction.java",
                        "import java.util.function.Function;",
                        "public interface MyFunction extends Function<Integer,Integer> {}",
                        "TestGoal1.java",
                        "import java.util.function.Function;",
                        "import java.util.stream.Stream;",
                        "public class TestGoal1 {",
                        "public int test(MyFunction f, Function<Integer,Boolean> pred){",
                        "Stream<Integer> integerStream = Stream.of(5, 4, 7, 8, 9, 6, 3, 2, 4, 5);",
                        "return integerStream.map(f::apply).filter(pred::apply).reduce(0, (x,y)->x + y);",
                        "}",
                        "public void boo5(){",
                        "test(x-> x + 5 ,x -> x%2 == 0);",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6,x -> x%2 != 0);",
                        "}",
                        "}").addOutputLines("MyFunction.java",
                "import java.util.function.IntUnaryOperator;",
                "public interface MyFunction extends IntUnaryOperator {}",
                "TestGoal1.java",
                "import java.util.function.IntPredicate;",
                "import java.util.stream.Stream;",
                "public class TestGoal1 {",
                "public int test(MyFunction f, IntPredicate pred){",
                "Stream<Integer> integerStream = Stream.of(5, 4, 7, 8, 9, 6, 3, 2, 4, 5);",
                "return integerStream.map(f::applyAsInt).filter(pred::test).reduce(0, (x,y)->x + y);",
                "}",
                "public void boo5(){",
                "test(x-> x + 5 ,x -> x%2 == 0);",
                "}",
                "public int boo6(){",
                "return test(x->x + 6,x -> x%2 != 0);",
                "}",
                "}");
    }

    public void psitive_Test_for_continer_of_FunctionType() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("Container.java",
                        "import java.util.function.Function;",
                        "public interface Container {",
                        "Function<Integer,Integer> get(Function<Integer,Integer> t);",
                        "}",
                        "ImplementsContainerFunction.java",
                        "import java.util.function.Function;",
                        "public class ImplementsContainerFunction implements Container {",
                        "@Override",
                        "public Function<Integer, Integer> get(Function<Integer, Integer> integerIntegerFunction) {",
                        "return  helper(integerIntegerFunction);",
                        "}",
                        "public Function<Integer, Integer> helper(Function<Integer, Integer> integerIntegerFunction){",
                        "return x -> integerIntegerFunction.apply(5);",
                        "}",
                        "}",
                        "UsesContainer.java",
                        "public class UsesContainer {",
                        "Container c = new ImplementsContainerFunction();",
                        "ImplementsContainerFunction c1 = new ImplementsContainerFunction();",
                        "public void test(){",
                        "c.get(x->x).apply(5);",
                        "c1.get(x->x+2).apply(5);",
                        "}",
                        "}"
                ).addOutputLines("Container.java",
                "import java.util.function.IntUnaryOperator;",
                "import java.util.function.Function;",
                "public interface Container {",
                "Function<Integer, Integer> get(IntUnaryOperator t);",
                "}",
                "ImplementsContainerFunction.java",
                "import java.util.function.Function;",
                "import java.util.function.IntUnaryOperator;",
                "public class ImplementsContainerFunction implements Container {",
                "@Override",
                "public Function<Integer, Integer> get(IntUnaryOperator integerIntegerFunction) {",
                "return  helper(integerIntegerFunction);",
                "}",
                "public Function<Integer, Integer> helper(IntUnaryOperator integerIntegerFunction){",
                "return x -> integerIntegerFunction.applyAsInt(5);",
                "}",
                "}",
                "UsesContainer.java",
                "public class UsesContainer {",
                "Container c = new ImplementsContainerFunction();",
                "ImplementsContainerFunction c1 = new ImplementsContainerFunction();",
                "public void test(){",
                "c.get(x->x).applyAsInt(5);",
                "c1.get(x->x+2).applyAsInt(5);",
                "}",
                "}");
    }

    public void negative_Test_for_List_of_FunctionType() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestGoal1ListOfFunction.java",
                        "import java.util.Arrays;",
                        "import java.util.List;",
                        "import java.util.function.Function;",
                        "public class TestGoal1ListOfFunction {",
                        "public int test(Function<Integer,Integer> f){",
                        "return f.apply(5);",
                        "}",
                        "public void boo5(){",
                        "List<Function<Integer,Integer>> list = Arrays.asList(x->x+1,x -> x+2);",
                        "test(list.get(0));",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}").addOutputLines("TestGoal1ListOfFunction.java",
                "import java.util.Arrays;",
                "import java.util.List;",
                "import java.util.function.Function;",
                "public class TestGoal1ListOfFunction {",
                "public int test(Function<Integer,Integer> f){",
                "return f.apply(5);",
                "}",
                "public void boo5(){",
                "List<Function<Integer,Integer>> list = Arrays.asList(x->x+1,x -> x+2);",
                "test(list.get(0));",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}");
    }

    public void negative_Test_for_anonymClassPassed() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestGoal1Anonym.java",
                        "import java.util.function.Function;",
                        "public class TestGoal1Anonym {",
                        "public int test(Function<Integer,Integer> f){",
                        "return f.apply(5);",
                        "}",
                        "public void boo5(){",
                        "test(new Function<Integer, Integer>() {",
                        "@Override",
                        "public Integer apply(Integer integer) {",
                        "return integer + 5;",
                        "}",
                        "}",
                        ");",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}").
                addOutputLines("TestGoal1Anonym.java",
                        "import java.util.function.Function;",
                        "public class TestGoal1Anonym {",
                        "public int test(Function<Integer,Integer> f){",
                        "return f.apply(5);",
                        "}",
                        "public void boo5(){",
                        "test(new Function<Integer, Integer>() {",
                        "@Override",
                        "public Integer apply(Integer integer) {",
                        "return integer + 5;",
                        "}",
                        "}",
                        ");",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}");
    }

    public void negative_Test_for_hierarchy() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestInterface.java",
                        "import java.util.function.Function;",
                        "public interface TestInterface<U,V> {",
                        "int test(Function<U,V> f);",
                        "}",
                        "InheritsTestInterface2.java",
                        "import java.util.function.Function;",
                        "public class InheritsTestInterface2 implements TestInterface<Integer,Integer> {",
                        "@Override",
                        "public int test(Function<Integer,Integer> f) {",
                        "return f.apply(6);",
                        "}",
                        "public void boo5(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}",
                        "InheritsTestInterface1.java",
                        "import java.util.function.Function;",
                        "public class InheritsTestInterface1 implements TestInterface<Integer,Integer> {",
                        "@Override",
                        "public int test(Function<Integer,Integer> f) {",
                        "return f.apply(6);",
                        "}",
                        "public void boo5(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}",
                        "Inherits_InheritsTestInterface2.java",
                        "import java.util.function.Function;",
                        "public class Inherits_InheritsTestInterface2 extends InheritsTestInterface2 {",
                        "@Override",
                        "public int test(Function<Integer,Integer> f) {",
                        "return f.apply(6);",
                        "}",
                        "public void boo51(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo61 () {",
                        "return test(x -> x + 6);",
                        "}",
                        "}").addOutputLines("TestInterface.java",
                "import java.util.function.Function;",
                "public interface TestInterface<U,V> {",
                "int test(Function<U,V> f);",
                "}",
                "InheritsTestInterface2.java",
                "import java.util.function.Function;",
                "public class InheritsTestInterface2 implements TestInterface<Integer,Integer> {",
                "@Override",
                "public int test(Function<Integer,Integer> f) {",
                "return f.apply(6);",
                "}",
                "public void boo5(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}",
                "InheritsTestInterface1.java",
                "import java.util.function.Function;",
                "public class InheritsTestInterface1 implements TestInterface<Integer,Integer> {",
                "@Override",
                "public int test(Function<Integer,Integer> f) {",
                "return f.apply(6);",
                "}",
                "public void boo5(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}",
                "Inherits_InheritsTestInterface2.java",
                "import java.util.function.Function;",
                "public class Inherits_InheritsTestInterface2 extends InheritsTestInterface2 {",
                "@Override",
                "public int test(Function<Integer,Integer> f) {",
                "return f.apply(6);",
                "}",
                "public void boo51(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo61 () {",
                "return test(x -> x + 6);",
                "}",
                "}");
    }

    public void negative_Test_for_passedToGeneric() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestGoal1_passedToGeneric1.java",
                        "import java.util.function.Function;",
                        "public class TestGoal1_passedToGeneric1 {",
                        "public int test(Function<Integer,Integer> f){",
                        "helper(f);",
                        "return f.apply(5);",
                        "}",
                        "public <U>  U helper(U f){",
                        "return  f;",
                        "}",
                        "public void boo5(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}"
                ).addOutputLines("TestGoal1_passedToGeneric1.java",
                "import java.util.function.Function;",
                "public class TestGoal1_passedToGeneric1 {",
                "public int test(Function<Integer,Integer> f){",
                "helper(f);",
                "return f.apply(5);",
                "}",
                "public <U>  U helper(U f){",
                "return  f;",
                "}",
                "public void boo5(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}");
    }

    public void negative_Test_for_passedToGenericFunction() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestGoal1_passedToGeneric1.java",
                        "import java.util.function.Function;",
                        "public class TestGoal1_passedToGeneric1 {",
                        "public int test(Function<Integer,Integer> f){",
                        "helper(f);",
                        "return f.apply(5);",
                        "}",
                        " public <U,V>  V helper(Function<U,V> f){",
                        "return  null;",
                        "}",
                        "public void boo5(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}"
                ).addOutputLines("TestGoal1_passedToGeneric1.java",
                "import java.util.function.Function;",
                "public class TestGoal1_passedToGeneric1 {",
                "public int test(Function<Integer,Integer> f){",
                "helper(f);",
                "return f.apply(5);",
                "}",
                " public <U,V>  V helper(Function<U,V> f){",
                "return  null;",
                "}",
                "public void boo5(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}");
    }

    public void negative_Test_for_Function_passedTo_map() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestGoal1_passedToGeneric1.java",
                        "import java.util.function.Function;",
                        "import java.util.function.Predicate;",
                        "import java.util.stream.Stream;",
                        "public class TestGoal1_passedToGeneric1 {",
                        "public int test(Function<Integer,Integer> f, Predicate<Integer> pred){",
                        "Stream<Integer> integerStream = Stream.of(5, 4, 7, 8, 9, 6, 3, 2, 4, 5);",
                        "return integerStream.map(f).filter(pred).reduce(0, (x,y)->x + y);",
                        "}",
                        "public void boo5(){",
                        "test(x-> x + 5 ,x -> x%2 == 0);",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6,x -> x%2 != 0);",
                        "}",
                        "}"
                ).addOutputLines("TestGoal1_passedToGeneric1.java",
                "import java.util.function.Function;",
                "import java.util.function.Predicate;",
                "import java.util.stream.Stream;",
                "public class TestGoal1_passedToGeneric1 {",
                "public int test(Function<Integer,Integer> f, Predicate<Integer> pred){",
                "Stream<Integer> integerStream = Stream.of(5, 4, 7, 8, 9, 6, 3, 2, 4, 5);",
                "return integerStream.map(f).filter(pred).reduce(0, (x,y)->x + y);",
                "}",
                "public void boo5(){",
                "test(x-> x + 5 ,x -> x%2 == 0);",
                "}",
                "public int boo6(){",
                "return test(x->x + 6,x -> x%2 != 0);",
                "}",
                "}");
    }

    public void negative_Test_for_Wrapper_equal() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestGoal1Wrapper.java",
                        "import java.util.function.Function;",
                        "public class TestGoal1Wrapper {",
                        "public int test(Function<Integer,Integer> f){",
                        "return f.apply(5);",
                        "}",
                        "public void boo5(){",
                        "test(x-> {",
                        "if(x.equals(5))",
                        "return x + 5;",
                        "else return x*5;",
                        "} );",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}"
                ).addOutputLines("TestGoal1Wrapper.java",
                "import java.util.function.Function;",
                "public class TestGoal1Wrapper {",
                "public int test(Function<Integer,Integer> f){",
                "return f.apply(5);",
                "}",
                "public void boo5(){",
                "test(x-> {",
                "if(x.equals(5))",
                "return x + 5;",
                "else return x*5;",
                "} );",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}");
    }

    public void negative_Test_for_lambdaUsesDeclaration() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestGoal1Wrapper.java",
                        "import java.util.function.Function;",
                        "public class TestGoal1Wrapper {",
                        "public int test(Function<Integer,Integer> f){",
                        "return f.apply(5);",
                        "}",
                        "public void boo5(){",
                        "test((Integer x)-> x + 5 );",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}"
                ).addOutputLines("TestGoal1Wrapper.java",
                "import java.util.function.Function;",
                "public class TestGoal1Wrapper {",
                "public int test(Function<Integer,Integer> f){",
                "return f.apply(5);",
                "}",
                "public void boo5(){",
                "test((Integer x)-> x + 5 );",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}");
    }

    public void negative_Test_for_Wraper_doubleValue() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestGoal1Wrapper.java",
                        "import java.util.function.Function;",
                        "public class TestGoal1Wrapper {",
                        "public int test(Function<Integer,Integer> f){",
                        "return f.apply(5);",
                        "}",
                        "public void boo5(){",
                        "test(x -> x.doubleValue()/3 );",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}"
                ).addOutputLines("TestGoal1Wrapper.java",
                "import java.util.function.Function;",
                "public class TestGoal1Wrapper {",
                "public int test(Function<Integer,Integer> f){",
                "return f.apply(5);",
                "}",
                "public void boo5(){",
                "test(x -> x.doubleValue()/3 );",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}");
    }

    public void negative_Test_for_Wraper_toString() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestGoal1Wrapper.java",
                        "import java.util.function.Function;",
                        "public class TestGoal1Wrapper {",
                        "public int test(Function<Integer,Integer> f){",
                        "return f.apply(5);",
                        "}",
                        "public void boo5(){",
                        "test(x -> x.toString());",
                        "}",
                        "}"
                ).addOutputLines("TestGoal1Wrapper.java",
                "import java.util.function.Function;",
                "public class TestGoal1Wrapper {",
                "public int test(Function<Integer,Integer> f){",
                "return f.apply(5);",
                "}",
                "public void boo5(){",
                "test(x -> x.toString());",
                "}",
                "}");
    }

    public void negative_Test_for_MthdRef_as_arg() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestGoal1Wrapper.java",
                        "import java.util.function.Function;",
                        "public class TestGoal1Wrapper {",
                        "public int test(Function<Integer,Integer> f){",
                        "return f.apply(5);",
                        "}",
                        "public void boo5(){",
                        "test(Object::toString);",
                        "}",
                        "}"
                ).addOutputLines("TestGoal1Wrapper.java",
                "import java.util.function.Function;",
                "public class TestGoal1Wrapper {",
                "public int test(Function<Integer,Integer> f){",
                "return f.apply(5);",
                "}",
                "public void boo5(){",
                "test(Object::toString);",
                "}",
                "}");
    }

    public void negative_wrapper_used_constructor() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestWrapperConst.java",
                        "import java.util.function.Function;",
                        "public class TestGoal1Wrapper {",
                        "TestWrapperConst(Function<Integer,Integer> f){",
                        "int i = f.apply(5);",
                        "}",
                        "}",
                        "UseTestWrapperConst.java",
                        "public class UseTestWrapperConst {",
                        "public void test(){",
                        "TestWrapperConst t = new TestWrapperConst(x -> x.equals(5)?5:4);",
                        "}",
                        "}"
                ).addOutputLines("TestWrapperConst.java",
                "import java.util.function.Function;",
                "public class TestGoal1Wrapper {",
                "TestWrapperConst(Function<Integer,Integer> f){",
                "int i = f.apply(5);",
                "}",
                "}",
                "UseTestWrapperConst.java",
                "public class UseTestWrapperConst {",
                "public void test(){",
                "TestWrapperConst t = new TestWrapperConst(x -> x.equals(5)?5:4);",
                "}",
                "}");
    }

    public void negative_Test_SubType_GenericFunction() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("MyFunction.java",
                        "import java.util.function.Function;",
                        "public interface MyFunction<U,V> extends Function<U,V>{}",
                        "UseMyFunction.java",
                        "public class UseMyFunction {",
                        "public int test(MyFunction<Integer,Integer> f){",
                        "return f.apply(4);",
                        "}",
                        "public void boo5(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}",
                        "UseMyFunctionAgain.java",
                        "public class UseMyFunctionAgain {",
                        "public int test(MyFunction<Integer,Integer> f)){",
                        "return f.apply(4);",
                        "}",
                        "public void boo5(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo6(){",
                        "return test(x->x + 6);",
                        "}",
                        "}",
                        "UseUseMyFunctionAgain.java",
                        "public class UseUseMyFunctionAgain extends  UseMyFunctionAgain {",
                        "@Override",
                        "public int test(MyFunction<Integer,Integer> f){",
                        "return f.apply(4);",
                        "}",
                        "public void boo51(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public int boo61(){",
                        "return test(x->x + 6);",
                        "}",
                        "}"
                ).addOutputLines("MyFunction.java",
                "import java.util.function.Function;",
                "public interface MyFunction<U,V> extends Function<U,V>{}",
                "UseMyFunction.java",
                "public class UseMyFunction {",
                "public int test(MyFunction<Integer,Integer> f){",
                "return f.apply(4);",
                "}",
                "public void boo5(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}",
                "UseMyFunctionAgain.java",
                "public class UseMyFunctionAgain {",
                "public int test(MyFunction<Integer,Integer> f)){",
                "return f.apply(4);",
                "}",
                "public void boo5(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo6(){",
                "return test(x->x + 6);",
                "}",
                "}",
                "UseUseMyFunctionAgain.java",
                "public class UseUseMyFunctionAgain extends  UseMyFunctionAgain {",
                "@Override",
                "public int test(MyFunction<Integer,Integer> f){",
                "return f.apply(4);",
                "}",
                "public void boo51(){",
                "test(x-> x + 5 );",
                "}",
                "public int boo61(){",
                "return test(x->x + 6);",
                "}",
                "}");
    }

    public void negative_Test_SubType_Generic() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("TestInterface.java",
                        "public interface TestInterface <T> {",
                        "public void test(T t);",
                        "}",
                        "TestInterfaceFunction.java",
                        "import java.util.function.Function;",
                        "public class TestInterfaceFunction implements TestInterface<Function<Integer,Integer>> {",
                        "@Override",
                        "public void test(Function<Integer, Integer> integerIntegerFunction) {",
                        "integerIntegerFunction.apply(5);",
                        "}",
                        "public void boo5(){",
                        "test(x-> x + 5 );",
                        "}",
                        "public void boo6(){",
                        "test(x->x + 6);",
                        "}",
                        "}").addOutputLines("TestInterface.java",
                "public interface TestInterface <T> {",
                "public void test(T t);",
                "}",
                "TestInterfaceFunction.java",
                "import java.util.function.Function;",
                "public class TestInterfaceFunction implements TestInterface<Function<Integer,Integer>> {",
                "@Override",
                "public void test(Function<Integer, Integer> integerIntegerFunction) {",
                "integerIntegerFunction.apply(5);",
                "}",
                "public void boo5(){",
                "test(x-> x + 5 );",
                "}",
                "public void boo6(){",
                "test(x->x + 6);",
                "}",
                "}");
    }

    public void negative_Test_ContainerGeneric() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("Container.java",
                        "public interface Container <T> {",
                        "T get(T t);",
                        "}",
                        "ImplementsContainerFunction.java",
                        "import java.util.function.Function;",
                        "public class ImplementsContainerFunction implements Container<Function<Integer,Integer>>{",
                        "@Override",
                        "public Function<Integer, Integer> get(Function<Integer, Integer> integerIntegerFunction) {",
                        "integerIntegerFunction.apply(5);",
                        "}",
                        "}",
                        "UsesContainer.java",
                        "import java.util.function.Function;",
                        "public class UsesContainer {",
                        "Container<Function<Integer,Integer>> c = new ImplementsContainerFunction();",
                        "ImplementsContainerFunction c1 = new ImplementsContainerFunction();",
                        "public void test(){",
                        "c.get(x->x).apply(5);",
                        "c1.get(x->x+2).apply(5);",
                        "}",
                        "}").addOutputLines("Container.java",
                "public interface Container <T> {",
                "T get(T t);",
                "}",
                "ImplementsContainerFunction.java",
                "import java.util.function.Function;",
                "public class ImplementsContainerFunction implements Container<Function<Integer,Integer>>{",
                "@Override",
                "public Function<Integer, Integer> get(Function<Integer, Integer> integerIntegerFunction) {",
                "integerIntegerFunction.apply(5);",
                "}",
                "}",
                "UsesContainer.java",
                "import java.util.function.Function;",
                "public class UsesContainer {",
                "Container<Function<Integer,Integer>> c = new ImplementsContainerFunction();",
                "ImplementsContainerFunction c1 = new ImplementsContainerFunction();",
                "public void test(){",
                "c.get(x->x).apply(5);",
                "c1.get(x->x+2).apply(5);",
                "}",
                "}");
    }

    public void negative_Test_ContainerGenericFunction() throws Exception {
        BugCheckerRefactoringTestHelper.newInstance(new MigrateType(), getClass())
                .addInputLines("Container.java",
                        "import java.util.function.Function;",
                        "public interface Container<U,V>{",
                        "Function<U,V> get(Function<U,V> t);",
                        "}",
                        "ImplementsContainerFunction.java",
                        "import java.util.function.Function;",
                        "public class ImplementsContainerFunction implements Container<Integer,Integer> {",
                        "@Override",
                        "public Function<Integer, Integer> get(Function<Integer, Integer> integerIntegerFunction) {",
                        "integerIntegerFunction.apply(5);",
                        "}",
                        "}",
                        "UsesContainer.java",
                        "import java.util.function.Function;",
                        "public class UsesContainer {",
                        "Container<Function<Integer,Integer>> c = new ImplementsContainerFunction();",
                        "ImplementsContainerFunction c1 = new ImplementsContainerFunction();",
                        "public void test(){",
                        "c.get(x->x).apply(5);",
                        "c1.get(x->x+2).apply(5);",
                        "}",
                        "}").addOutputLines("Container.java",
                "import java.util.function.Function;",
                "public interface Container<U,V>{",
                "Function<U,V> get(Function<U,V> t);",
                "}",
                "ImplementsContainerFunction.java",
                "import java.util.function.Function;",
                "public class ImplementsContainerFunction implements Container<Integer,Integer> {",
                "@Override",
                "public Function<Integer, Integer> get(Function<Integer, Integer> integerIntegerFunction) {",
                "integerIntegerFunction.apply(5);",
                "}",
                "}",
                "UsesContainer.java",
                "import java.util.function.Function;",
                "public class UsesContainer {",
                "Container<Function<Integer,Integer>> c = new ImplementsContainerFunction();",
                "ImplementsContainerFunction c1 = new ImplementsContainerFunction();",
                "public void test(){",
                "c.get(x->x).apply(5);",
                "c1.get(x->x+2).apply(5);",
                "}",
                "}");
    }



}

